#!/usr/bin/env bash
# Setup script for https://github.com/markosamuli/linux-machine

DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

# Commands
run_playbook=1        # Run playbook as default command
syntax_check=0        # Run command to check syntax
list_tags=0           # Run command to list tags

# Setup options
check_os_upgrades=1   # Check for OS upgrades
install_roles=1       # Install Ansible roles
install_ansible=1     # Install Ansible
install_roles_force=0 # Force overwriting existing Ansible roles
update_roles=0        # Update Ansible roles to the latest versions
print_versions=0      # Print Python and Ansible versions

# System properties
is_macos=""        # macOS
is_linux=""        # Linux
is_ubuntu=""       # Ubuntu
is_pengwin=""      # Pengwin
is_wsl=""          # Windows Subsystem for Linux

# macOS specific setup options
install_homebrew=1 # Install Homebrew
ansible_homebrew=1 # Force use of Ansible from Homebrew

# Environment configuration
deploy_env="local"

# Local variables
local_vars_file="machine.yaml"

# Ansible playbook options
ansible_playbook="playbooks/main.yml"
ansible_roles="playbooks/roles"
ansible_roles_opts=""
ansible_tags=""
ansible_skip_tags=""
ansible_verbose=0
ansible_become=0

# Install Ansible from PyPI
ansible_pypi="${MACHINE_ANSIBLE_PYPI:-false}"

# Ansible virtualenv
ansible_virtualenv="${DIR}/.venv"

# Ansible version test
required_ansible_version="2.7"

# Ansible PPA to use
ansible_version="${MACHINE_ANSIBLE_VERSION:-2.8}"
ansible_ppa="ansible/ansible-${ansible_version}"
ansible_ppa_key_id="93C4A3FD7BB9C367"

# Print error into STDERR
error() {
    echo "$@" 1>&2
}

# Print usage help
show_help() {
    echo "Usage: $0"

    cat <<END_OF_OPTIONS

  -h         Show this help
  -f         Force overwriting existing Ansible roles
  -v         Verbose mode
  -n         Do not run Ansible playbook
  -q         Do not install Ansible requirements
  -l         List available Ansible tags
  -s         Ansible playbook syntax check
  -u         Update Ansible roles to the latest versions
  -t TAGS    Run Ansible with the given comma separated list of tags
  -i TAGS    Skip the given list of tags

  --reinstall-ansible
      Remove and re-install Ansible

  --enable-ansible-pypi
      Enable Ansible installation from PyPI into a virtualenv

  --disable-ansible-pypi
      Disable Ansible installation from PyPI into a virtualenv

  --install-ansible
      Enable Ansible installation

  --no-run-playbook
      Disable Ansible playbooks from being run

  --no-install-roles
      Disable Ansible roles from being installed or updated

  --verbose
      Enable verbose Ansible output

  --print-versions
      Print Ansible and Python versions
END_OF_OPTIONS
}

# Get Ansible version
get_ansible_version() {
    "$(ansible_bin_prefix)ansible" \
        --version |
        grep "^ansible" |
        awk '{ print $2 }'
}

# Check we're not using broken Ansible versions
check_broken_ansible_versions() {
    local installed_version
    installed_version=$(get_ansible_version)
    echo "*** Check that we're not using Ansible v2.8.6"
    if [ "${installed_version}" == "2.8.6" ]; then
        error "Ansible v2.8.6 is not supported, try upgrading to Ansible v2.8.7"
        exit 1
    fi
}

# Check Ansible version
check_ansible_version() {
    local IFS=.
    # shellcheck disable=SC2206
    local required=($1)
    local installed
    local installed_ansible_version
    installed_ansible_version=$(get_ansible_version)
    if [ -z "$installed_ansible_version" ]; then
        return 1
    fi
    # shellcheck disable=SC2206
    installed=($installed_ansible_version)
    # shellcheck disable=SC2004
    if ((${installed[0]} < ${required[0]})); then
        return 1
    fi
    # shellcheck disable=SC2004
    if ((${installed[1]} < ${required[1]})); then
        return 1
    fi
    return 0
}

# Install dependencies on Linux
install_linux_dependencies() {
    if [ "${install_ansible}" == "1" ]; then
        install_ansible
    fi
}

# Install dependencies on macOS
install_macos_dependencies() {
    if [ "${install_homebrew}" == "1" ]; then
        install_xcode_cli
        install_homebrew
    fi
    if [ "${install_ansible}" == "1" ]; then
        install_ansible
    fi
}

# Install Xcode Command Line Tools
install_xcode_cli() {
    if command -v gcc >/dev/null; then
        return 0
    fi
    local errmsg="Failed to install Xcode Command Line Tools"
    echo "*** Installing Xcode Command Line Tools..."
    xcode-select --install ||
        {
            error "${errmsg}"
            exit 1
        }
}

# Install Homebrew
install_homebrew() {
    if command -v brew >/dev/null; then
        return 0
    fi
    local url="https://raw.githubusercontent.com"
    url="${url}/Homebrew/install/master/install"
    local errmsg="Failed to install Homebrew"
    echo "*** Installing Homebrew..."
    ruby -e "$(curl -fsSL ${url})" ||
        {
            error "${errmsg}"
            exit 1
        }
}

# Install Ansible
install_ansible() {
    if [ "${is_macos}" == "1" ]; then
        install_ansible_on_macos
    elif [ "${is_linux}" == "1" ]; then
        install_ansible_on_linux
    else
        error "Your system is not supported"
        exit 1
    fi
}

# Install Ansible on Linux
install_ansible_on_linux() {
    if command -v ansible >/dev/null; then
        return 0
    fi
    if [ "${is_ubuntu}" == "1" ]; then
        if [ "${ansible_pypi}" != "true" ]; then
            install_ansible_on_ubuntu && return 0
        fi
        if [ "${ansible_pypi}" != "never" ]; then
            install_ansible_with_pip && return 0
        fi
        error "Failed to install Ansible"
        exit 1
    elif [ "${is_pengwin}" == "1" ]; then
        if [ "${ansible_pypi}" != "true" ]; then
            install_ansible_on_debian && return 0
        fi
        if [ "${ansible_pypi}" != "never" ]; then
            install_ansible_with_pip && return 0
        fi
        error "Failed to install Ansible"
        exit 1
    else
        error "Your system is not supported"
        exit 1
    fi
}

# Install Ansible on macOS
install_ansible_on_macos() {
    if command -v ansible >/dev/null; then
        # If we don't require Ansible from Homebrew
        if [ "${ansible_homebrew}" == "0" ]; then
            return 0
        fi
        # Check if Ansible is installed with Homebrew
        if [ "$(brew --prefix ansible)" != "" ]; then
            return 0
        fi
    fi
    install_ansible_with_homebrew
}

# Install Ansible with Homebrew
install_ansible_with_homebrew() {
    local errmsg="Failed to install Ansible"
    echo "*** Installing Ansible with Homebrew..."
    brew install ansible ||
        {
            error "${errmsg}"
            exit 1
        }
}

# Uninstall Ansible from Homebrew
uninstall_ansible_with_homebrew() {
    local errmsg="Failed to uninstall Ansible"
    echo "*** Uninstalling Ansible with Homebrew..."
    brew uninstall ansible ||
        {
            error "${errmsg}"
            exit 1
        }

}

# Get APT package install candidate
apt_install_candidate() {
    local package=$1
    local candidate
    candidate=$(apt-cache policy "${package}" | grep 'Candidate:' | sed 's/[[:space:]]*Candidate:[[:space:]]*//')
    if [ -n "${candidate}" ]; then
        echo "${candidate}" | cut -d- -f1
    fi
}

# Instal Ansible with PIP
install_ansible_with_pip() {
    local ansible_pypi_version

    if ! command -v pip >/dev/null; then
        error "pip not found"
        return 1
    fi

    if [ "${ansible_version}" == "2.7" ]; then
        ansible_pypi_version="<2.8"
    elif [ "${ansible_version}" == "2.8" ]; then
        ansible_pypi_version="!=2.8.6,<2.9"
    elif [ "${ansible_version}" == "2.9" ]; then
        ansible_pypi_version="<2.10"
    else
        error "Unsupported Ansible version ${ansible_version}"
        return 1
    fi

    if ! command -v virtualenv >/dev/null; then
        error "Python virtuelenv not found"
        return 1
    fi

    if [ ! -d "${ansible_virtualenv}" ]; then
        virtualenv "${ansible_virtualenv}" || {
            error "Failed to create virtualenv in ${ansible_virtualenv}"
            return 1
        }
    fi

    echo "*** Activate virtualenv in ${ansible_virtualenv}"
    # shellcheck disable=SC1090
    source "${ansible_virtualenv}/bin/activate"

    pip install "ansible${ansible_pypi_version}" || {
        error "Failed to install Ansible"
        return 1
    }

    echo "*** Ansible ${ansible_version} installed"
    ansible_pypi=true
}

install_software_properties_common() {
    local installed
    installed=$(dpkg -s software-properties-common 2>/dev/null | grep 'Status' | grep installed)
    if [ -z "${installed}" ]; then
        echo "*** Install software-properties-common..."
        sudo apt-get install -y software-properties-common
    fi
}

# Remove Ansible installations
remove_ansible() {

    remove_ansible_virtualenv

    if [ "${is_macos}" == "1" ]; then
        uninstall_ansible_with_homebrew
    elif [ "${is_linux}" == "1" ]; then
        if [ "${is_ubuntu}" == "1" ]; then
            remove_ansible_apt
            remove_ansible_ppa_sources_list
        elif [ "${is_pengwin}" == "1" ]; then
            remove_ansible_apt
            remove_ansible_ppa_sources_list
        fi
    fi
}

install_ansible_ppa_on_ubuntu() {

    # Do not add PPA if it already exists
    if compgen -G "/etc/apt/sources.list.d/ansible*.list" >/dev/null; then
        local deb_url="http://ppa.launchpad.net/${ansible_ppa}/ubuntu"
        if grep -q "^deb ${deb_url}" /etc/apt/sources.list.d/ansible*.list; then
            return 0
        fi
    fi

    install_software_properties_common

    echo "*** Add ${ansible_ppa} PPA repository..."
    sudo apt-add-repository -y "ppa:${ansible_ppa}"

    add_ansible_ppa_key

    echo "*** Update APT cache..."
    sudo apt-get update
}

remove_ansible_ppa_sources_list() {
    local update_apt_cache
    for apt_list in /etc/apt/sources.list.d/ansible*.list; do
        if [ -e "${apt_list}" ]; then
            echo "Remove ${apt_list}"
            sudo rm -f "${apt_list}" || {
                error "Failed to remove ${apt_list}"
                exit 1
            }
            update_apt_cache=1
        fi
    done
    if [ "${update_apt_cache}" == "1" ]; then
        echo "*** Update APT cache..."
        sudo apt-get update
    fi
}

# Remove virtualenv when using OS package installation
remove_ansible_virtualenv() {
    if [ -d "${ansible_virtualenv}" ]; then
        echo "*** Removing virtualenv in '${ansible_virtualenv}'"
        rm -rf "${ansible_virtualenv}"
    fi
}

# Install Ansible with APT on Ubuntu
install_ansible_on_ubuntu() {

    install_ansible_ppa_on_ubuntu

    if ! install_ansible_apt "${ansible_version}"; then
        error "Couldn't install Ansible ${ansible_version} from APT"
        return 1
    fi

    echo "*** Ansible ${ansible_version} installed"

    remove_ansible_virtualenv
}

install_ansible_ppa_on_debian() {
    local deb_url="http://ppa.launchpad.net/${ansible_ppa}/ubuntu"
    local apt_list="/etc/apt/sources.list.d/ansible.list"

    if [ -e "${apt_list}" ]; then
        if grep -q "^deb ${deb_url}" "${apt_list}"; then
            return 0
        fi
        echo "*** Updating ${ansible_ppa} PPA repository..."
        sudo sh -c "echo 'deb ${deb_url} trusty main' > ${apt_list}"
    else
        echo "*** Add ${ansible_ppa} PPA repository..."
        sudo sh -c "echo 'deb ${deb_url} trusty main' > ${apt_list}"
    fi

    add_ansible_ppa_key

    echo "*** Update APT cache..."
    sudo apt-get update
}

# Install Ansible with APT on Debian
install_ansible_on_debian() {

    install_ansible_ppa_on_debian

    if ! install_ansible_apt "${ansible_version}"; then
        error "Couldn't install Ansible ${ansible_version} from APT"
        return 1
    fi

    echo "*** Ansible ${ansible_version} installed"

    remove_ansible_virtualenv
}

# Install Ansible APT package
install_ansible_apt() {
    local version=$1

    local candidate
    candidate=$(apt_install_candidate "ansible")
    if [ "${candidate}" == "2.8.6" ]; then
        error "WARNING: Not installing Ansible version ${candidate} from APT"
        return 1
    fi

    echo "*** Installing Ansible ${version}..."
    sudo apt-get install -y "ansible=${version}*"
}

# Remove Ansible APT package
remove_ansible_apt() {
    sudo apt-get remove -y "ansible"
}

# Add Ansible PPA signing key
add_ansible_ppa_key() {
    echo "*** Add Ansible PPA signing key..."
    gpg --keyserver keyserver.ubuntu.com --recv "${ansible_ppa_key_id}"
    gpg --export --armor "${ansible_ppa_key_id}" | sudo apt-key add -
}

# Remove Ansible PPA signing key
remove_ansible_ppa_key() {
    echo "*** Remove Ansible PPA signing key..."
    sudo apt-key del "${ansible_ppa_key_id}"
}

# Install Ansible roles
install_ansible_roles() {
    local errmsg="Failed to install Ansible roles"
    echo "*** Installing Ansible roles..."
    "$(ansible_bin_prefix)ansible-galaxy" install \
        -r requirements.yml \
        -p ${ansible_roles} \
        ${ansible_roles_opts} ||
        {
            error "${errmsg}"
            exit 1
        }
}

# Update Ansible roles
update_ansible_roles() {
    local errmsg="Failed to update Ansible roles"
    echo "*** Installing Python requirements..."
    pip install -r requirements.txt
    echo "*** Updating Ansible roles..."
    ./scripts/update-roles.py || {
        error "${errmsg}"
        exit 1
    }
}

# Detect if we're running macOS or Linux
detect_os() {
    if test "$(uname)" = "Darwin"; then
        is_macos=1
        is_linux=0
    elif test "$(uname)" = "Linux"; then
        is_linux=1
        is_macos=0
        detect_ubuntu
        detect_pengwin
        detect_wsl
    else
        error "Your system is not supported"
        exit 1
    fi
}

# Detect Windows Subsystem for Linux
detect_wsl() {
    if grep -q Microsoft /proc/version; then
        echo "*** Windows Subsystem for Linux detected"
        is_wsl=1
    else
        is_wsl=0
    fi
}

# Detect Ubuntu
detect_ubuntu() {
    if test -f /etc/lsb-release; then
        if grep -q Ubuntu /etc/lsb-release; then
            echo "*** Ubuntu detected"
            is_ubuntu=1
        else
            is_ubuntu=0
        fi
    else
        is_ubuntu=0
    fi
}

# Detect Pengwin
detect_pengwin() {
    if test -f /etc/os-release; then
        if grep -q Pengwin /etc/os-release; then
            echo "*** Pengwin detected"
            is_pengwin=1
        else
            is_pengwin=0
        fi
    else
        is_pengwin=0
    fi
}

# Ansible binary prefix
ansible_bin_prefix() {
    if [ "${is_macos}" == "1" ]; then
        if [ "${ansible_homebrew}" == "1" ]; then
            echo "$(brew --prefix ansible)/bin/"
        fi
    fi
}

# Run Ansible playbook
run_ansible_playbook() {

    if [ -n "${ansible_executable}" ]; then
        echo "*** Use ${ansible_executable} as Ansible executable"
        export ANSIBLE_EXECUTABLE="${ansible_executable}"
    fi

    # shellcheck disable=SC2046
    "$(ansible_bin_prefix)ansible-playbook" "${ansible_playbook}" \
        $(ansible_inventory) \
        $(run_ansible_playbook_opts)
}

# Options to pass to ansible-playbook
run_ansible_playbook_opts() {

    local ansible_opts=()

    if [ -e "${local_vars_file}" ]; then
        ansible_opts+=("--extra-vars @${local_vars_file}")
    fi

    if [ "${ansible_verbose}" == "1" ]; then
        ansible_opts+=("-v")
    fi

    if [ "${ansible_tags}" != "" ]; then
        ansible_opts+=("--tags=${ansible_tags}")
    fi

    if [ "${ansible_skip_tags}" != "" ]; then
        ansible_opts+=("--skip-tags=${ansible_skip_tags}")
    fi

    # Variables to pass to ansible-playbook
    local ansible_vars=()

    if [ "${is_linux}" == "1" ]; then
        if [ "${is_wsl}" == "1" ]; then
            ansible_vars+=("\"is_wsl\":true")
        else
            ansible_vars+=("\"is_wsl\":false")
        fi
    fi

    ansible_vars+=("\"user_home\":\"${HOME}\"")
    ansible_vars+=("\"user_name\":\"${USER}\"")

    if [ "${#ansible_vars[@]}" -gt "0" ]; then
        local extra_vars
        extra_vars=$(printf ",%s" "${ansible_vars[@]}")
        extra_vars="{${extra_vars:1}}"
        ansible_opts+=("-e ${extra_vars}")
    fi

    if [ "${ansible_become}" == "1" ]; then
        sudo true || {
            error "sudo failed"
            exit 1
        }
        ansible_opts+=("--become")
    fi

    echo "${ansible_opts[@]}"
}

# Check Ansible playbook syntax
check_ansible_playbook_syntax() {
    # shellcheck disable=SC2046
    "$(ansible_bin_prefix)ansible-playbook" ${ansible_playbook} \
        $(ansible_inventory) \
        --syntax-check
}

# Ansible inventory options
ansible_inventory() {
    local inventory_opts=()
    if [ "${deploy_env}" != "" ]; then
        deploy_env_err="Could not find inventory file for ${deploy_env}"
        [ -e "inventory/${deploy_env}" ] ||
            {
                error "${deploy_env_err}"
                exit 1
            }
        inventory_opts+=("-i inventory/${deploy_env}")
    fi
    echo "${inventory_opts[@]}"
}

# List tags available in Ansible playbooks
ansible_playbook_list_tags() {
    # shellcheck disable=SC2046
    "$(ansible_bin_prefix)ansible-playbook" ${ansible_playbook} \
        $(ansible_inventory) \
        --list-tags
}

# Setup dependencies
setup_dependencies() {

    if [ "${is_macos}" == "1" ]; then
        install_macos_dependencies
    elif [ "${is_linux}" == "1" ]; then
        install_linux_dependencies
    else
        error "Your system is not supported"
        exit 1
    fi

    local ansible_err="Ansible not found"
    if [ "$(ansible_bin_prefix)" == "" ]; then
        if ! command -v ansible >/dev/null; then
            error "${ansible_err}"
            exit 1
        fi
    else
        "$(ansible_bin_prefix)ansible" --version >/dev/null ||
            {
                error "${ansible_err}"
                exit 1
            }
    fi

}

# Configure options
configure_options() {
    if [ "${is_macos}" == "1" ]; then
        ansible_become=0
    elif [ "${is_linux}" == "1" ]; then
        ansible_become=1
        ansible_homebrew=0
        install_homebrew=0
        if [ "${is_wsl}" == "1" ]; then
            ansible_executable=$(command -v /bin/bash 2>/dev/null)
        fi
    fi
}

# Configure Ansible PATH
configure_ansible_path() {
    # Skip virtualenv and PATH config if using Homebrew
    if [ "${ansible_homebrew}" == "1" ]; then
        return 0
    fi

    # Activate local virtualenv if found
    if [ -d "${ansible_virtualenv}" ]; then
        echo "*** Activate virtualenv in ${ansible_virtualenv}"
        # shellcheck disable=SC1090
        source "${ansible_virtualenv}/bin/activate"
        ansible_pypi=1
        return 0
    fi

    # Use Ansible from ~/.local if found
    local local_bin_path
    if [ -e "$HOME/.local/bin/ansible" ]; then
        echo "*** Ansible found in ~/.local/bin"
        local_bin_path=$(echo "$PATH" | grep "$HOME/\.local/bin")
        if [ -z "${local_bin_path}" ]; then
            echo "*** Adding ~/.local/bin to PATH"
            PATH="$PATH:$HOME/.local/bin"
        fi
        ansible_pypi=1
        return 0
    fi
}

# Check for upgrades
check_upgrades() {
    if [ "${check_os_upgrades}" != "1" ]; then
        return 0
    fi
    if [ "${is_ubuntu}" == "1" ]; then
        check_dist_upgrades
    elif [ "${is_pengwin}" == "1" ]; then
        check_dist_upgrades
        check_pengwin_upgrades
    elif [ "${is_macos}" == "1" ]; then
        check_brew_upgrades
    fi
}

# Check for distribution upgrades on Debian-based systems
check_dist_upgrades() {
    echo "*** Checking for distribution upgrade..."
    if [ -f "/etc/apt/.dist-upgrade" ]; then
        echo "A distribution upgrade is available."
    fi
}

# Check for Pengwin core upgrades
check_pengwin_upgrades() {
    echo "*** Checking for Pengwin core upgrades..."
    local upgrades=""
    upgrades="$(apt-get -s upgrade --show-upgraded --assume-no | grep pengwin)"
    if [[ "${upgrades}" == *"pengwin"* ]]; then
        echo "Pengwin core package upgrades found."
        echo "Use 'pengwin-setup' to upgrade them."
    fi
}

# Check for Homebrew upgrades
check_brew_upgrades() {
    local outdated
    outdated="$(brew outdated -q)"
    if [ -n "${outdated}" ]; then
        echo "Outdated Homebrew packages found"
        echo "Run 'brew outdated' to list them and 'brew upgrade' to upgrade"
    fi
}

# Check user is not root
check_user() {
    if [ "$USER" == "root" ]; then
        error "FAILED: USER is root"
        exit 1
    fi
    if [ "$HOME" == "/root" ]; then
        error "FAILED: HOME set to /root"
        exit 1
    fi
}

# Parse command line arguments
POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --reinstall-ansible)
            install_ansible=1
            remove_ansible=1
            shift
            ;;
        --enable-ansible-pypi)
            ansible_pypi=true
            shift
            ;;
        --disable-ansible-pypi)
            ansible_pypi=never
            shift
            ;;
        --install-ansible)
            install_ansible=1
            shift
            ;;
        --no-run-playbook)
            run_playbook=0
            shift
            ;;
        --no-install-roles)
            install_roles=0
            shift
            ;;
        --verbose)
            ansible_verbose=1
            shift
            ;;
        --print-versions)
            print_versions=1
            shift
            ;;
        *) # unknown option
            POSITIONAL+=("$1") # save it in an array for later
            shift              # past argument
            ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# Parse command line options
while getopts ":hfnqlsvut:i:" opt; do
    case $opt in
        h)
            show_help
            exit 0
            ;;
        f)
            install_roles_force=1
            ;;
        n)
            run_playbook=0
            ;;
        q)
            check_os_upgrades=0
            install_roles=0
            install_ansible=0
            install_homebrew=0
            ;;
        l)
            list_tags=1
            run_playbook=0
            ;;
        s)
            syntax_check=1
            run_playbook=0
            ;;
        v)
            ansible_verbose=1
            print_versions=1
            ;;
        u)
            update_roles=1
            ;;
        i)
            ansible_skip_tags=$OPTARG
            ;;
        t)
            ansible_tags=$OPTARG
            ;;
        \?)
            error "Invalid option: -$OPTARG"
            show_help
            exit 1
            ;;
        :)
            error "Option -$OPTARG requires an argument"
            exit 1
            ;;
    esac
done

# Detect system properties
detect_os

# Configure options
configure_options

# Remove existing Ansible installations
if [ "${remove_ansible}" == "1" ]; then
    remove_ansible
fi

# Configure Ansible path
configure_ansible_path

# Setup dependencies
setup_dependencies

# Check for upgrades
check_upgrades

# Check current user is not root
check_user

if [ "${print_versions}" == "1" ]; then
    python --version
    ansible --version
fi

if ! check_ansible_version ${required_ansible_version}; then
    error "Ansible ${required_ansible_version} required"
    exit 1
fi

check_broken_ansible_versions

if [ "${update_roles}" == "1" ]; then
    update_ansible_roles
fi

if [ "${install_roles_force}" == "1" ]; then
    ansible_roles_opts="${ansible_roles_opts} --force"
fi

if [ "${install_roles}" == "1" ]; then
    install_ansible_roles
fi

if [ "${list_tags}" == "1" ]; then
    ansible_playbook_list_tags
elif [ "${syntax_check}" == "1" ]; then
    check_ansible_playbook_syntax
elif [ "${run_playbook}" == "1" ]; then
    run_ansible_playbook
fi
